dbrp "telegraf"."autogen"

var measurement string
var where_filter = lambda: TRUE
var group_by = [*]
var grafanaPanelId = ''
var grafanaDashboardName = ''
var windowPeriod = 1m
var windowEvery = 1m  

var morgothField string
var morgothScoreField = 'anomalyScore'
var morgothMinSupport = 0.05
var morgothErrorTolerance = 0.01
var morgothConsensus = 0.5
var jsMin = 0.0
var jsMax = 1000000.0
var jsBinWidth = 100.0
var jsPValue = 0.05
var ksConfidence = 3
var sigmaDeviation = 3.0
var topic string

stream
    |from()
        .measurement(measurement)
        .groupBy(group_by)
        .where(where_filter)
// Window the Data for a certain time
    |window()
        .period(windowPeriod)
        .every(windowEvery)
        .align()
// send each window to morgoth
    @morgoth()
        .field(morgothField)
        .anomalousField('anomalous')
        .scoreField(morgothScoreField)
        .minSupport(morgothMinSupport)	
        .errorTolerance(morgothErrorTolerance)
	.consensus(morgothConsensus)
        // configure a JSDIV, a KS-test and a sigma fingerprinter
	.jsdiv(jsMin, jsMax, jsBinWidth, jsPValue)
	.kstest(ksConfidence)
	.sigma(sigmaDeviation)
    |default()
        .tag('grafanaPanelID', grafanaPanelId) 
        .tag('grafanaDashboardName', grafanaDashboardName) 
//morgoth returns any anomalous window
    |alert()
        .crit(lambda: "anomalous")
        .message(string(measurement) + ' is {{ .Level }}@@@{{ index .Tags "device" }}@{{ index .Tags "host" }}:{{ index .Tags "fqdn" }}@@@For {{ .Duration }}, since {{ .Time }}')
        .topic(topic)
